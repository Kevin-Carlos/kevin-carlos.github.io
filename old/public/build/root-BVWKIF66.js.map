{
  "version": 3,
  "sources": ["browser-route-module:/Users/kevincarlos/Documents/projects/kevin-carlos.github.io/app/root.tsx?browser", "../../app/root.tsx"],
  "sourcesContent": ["export { default, links, meta } from \"/Users/kevincarlos/Documents/projects/kevin-carlos.github.io/app/root.tsx\";", "import {\n  HeadersFunction,\n  LoaderFunction,\n  MetaFunction,\n} from '@remix-run/cloudflare';\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from '@remix-run/react';\nimport { useContext, useEffect } from 'react';\nimport { useDarkMode } from './common/hooks/theme';\nimport { getColorScheme } from './cookies';\nimport { ClientStyleContext, styled } from './stitches';\nimport { ThemeCtx } from './ThemeContext';\n\n// className=\"h-full w-full bg-theme-white dark:bg-theme-black font-body overflow-hidden\"\nconst Body = styled('body', {\n  height: '100%',\n  width: '100%',\n  fontFamily: '$body',\n  overflow: 'hidden',\n  backgroundColor: '$body',\n});\n\nexport const headers: HeadersFunction = () => ({\n  'Accept-CH': 'Sec-CH-Prefers-Color-Scheme',\n});\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const cs = await getColorScheme(request);\n\n  console.log('COLOR SHCEME', cs);\n\n  return { colorScheme: cs };\n};\n\nexport const links = () => {\n  return [\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700;800;900&display=swap',\n    },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap',\n    },\n  ];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Kevin Carlos',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nexport default function App() {\n  const { colorScheme } = useLoaderData();\n\n  const [themeMode, setThemeMode] = useDarkMode();\n\n  useEffect(() => {\n    setThemeMode(colorScheme);\n  }, [colorScheme]);\n\n  const clientStyleData = useContext(ClientStyleContext);\n\n  // Only executed on client\n  useEffect(() => {\n    // reset cache to re-apply global styles\n    clientStyleData.reset();\n  }, [clientStyleData]);\n\n  return (\n    <html lang=\"en\" style={{ height: '100%', width: '100%' }}>\n      <head>\n        <Meta />\n        <Links />\n        <style\n          id=\"stitches\"\n          dangerouslySetInnerHTML={{ __html: clientStyleData.sheet }}\n          suppressHydrationWarning\n        />\n      </head>\n      <Body className={colorScheme}>\n        <ThemeCtx.Provider value={{ mode: themeMode, setMode: setThemeMode }}>\n          <Outlet />\n        </ThemeCtx.Provider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </Body>\n    </html>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAcA,oBAAsC;AAOtC,IAAM,OAAO,OAAO,QAAQ;AAAA,EAC1B,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,iBAAiB;AAAA;AAeZ,IAAM,QAAQ,MAAM;AACzB,SAAO;AAAA,IACL;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA,IAER;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA;AAAA;AAKL,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA;AAGG,eAAe;AAC5B,QAAM,EAAE,gBAAgB;AAExB,QAAM,CAAC,WAAW,gBAAgB;AAElC,+BAAU,MAAM;AACd,iBAAa;AAAA,KACZ,CAAC;AAEJ,QAAM,kBAAkB,8BAAW;AAGnC,+BAAU,MAAM;AAEd,oBAAgB;AAAA,KACf,CAAC;AAEJ,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,IAAK,OAAO,EAAE,QAAQ,QAAQ,OAAO;AAAA,KAC9C,oCAAC,QAAD,MACE,oCAAC,MAAD,OACA,oCAAC,OAAD,OACA,oCAAC,SAAD;AAAA,IACE,IAAG;AAAA,IACH,yBAAyB,EAAE,QAAQ,gBAAgB;AAAA,IACnD,0BAAwB;AAAA,OAG5B,oCAAC,MAAD;AAAA,IAAM,WAAW;AAAA,KACf,oCAAC,SAAS,UAAV;AAAA,IAAmB,OAAO,EAAE,MAAM,WAAW,SAAS;AAAA,KACpD,oCAAC,QAAD,QAEF,oCAAC,mBAAD,OACA,oCAAC,SAAD,OACA,oCAAC,YAAD;AAAA;",
  "names": []
}
