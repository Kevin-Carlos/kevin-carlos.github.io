{
  "version": 3,
  "sources": ["browser-route-module:/Users/kevincarlos/Documents/projects/kevin-carlos.github.io/app/routes/projects/loot-crate/index.tsx?browser", "../../../../../app/routes/projects/loot-crate/index.tsx", "../../../../../app/routes/projects/loot-crate/crates/index.ts", "../../../../../app/routes/projects/loot-crate/crates/naive-box.tsx", "../../../../../app/routes/projects/loot-crate/crates/helpers/index.ts", "../../../../../app/routes/projects/loot-crate/crates/helpers/centered-text-item.tsx", "../../../../../app/routes/projects/loot-crate/crates/helpers/character-modal.tsx", "../../../../../app/routes/projects/loot-crate/crates/helpers/crate-info-item.tsx", "../../../../../app/routes/projects/loot-crate/crates/weighted-box.tsx", "../../../../../app/routes/projects/loot-crate/crates/open-box.ts"],
  "sourcesContent": ["export { default } from \"/Users/kevincarlos/Documents/projects/kevin-carlos.github.io/app/routes/projects/loot-crate/index.tsx\";", "import { Layout } from '~/common/layout';\nimport { NaiveBox, WeightedBox } from './crates';\n\nexport default function Index() {\n  return (\n    <Layout>\n      <div className=\"h-full w-full flex justify-center items-center\">\n        <ul className=\"dark:text-theme-white grid gap-5 md:grid-cols-2\">\n          <WeightedBox />\n\n          <NaiveBox />\n        </ul>\n      </div>\n    </Layout>\n  );\n}\n", "export { NaiveBox } from './naive-box';\nexport { WeightedBox } from './weighted-box';\n", "import { useEffect, useState } from 'react';\nimport { PillButton } from '~/common/ui-elements';\nimport { CenteredTextItem, CharacterModal, CrateInfoItem } from './helpers';\n\nconst randomBoxOdds = {\n  common: 74.65,\n  rare: 19,\n  epic: 5.3,\n  legendary: 1,\n  mythical: 0.05,\n} as const;\n\ntype NaiveBag = keyof typeof randomBoxOdds;\n\n/**\n * Knuth shuffle\n *\n * @see https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n */\nconst shuffle = <A,>(array: A[]): A[] => {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex != 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n};\n\nconst createBag = (): NaiveBag[] => {\n  // common 74.65\n  // rare 19% 380/20000\n  // epic 5.3% 106/2000\n  // legendary 1% 20/2000\n  // mythical 0.05% 1/2000\n\n  const bag: NaiveBag[] = ['mythical'];\n\n  for (let i = 0; i < 20; i++) {\n    bag.push('legendary');\n  }\n\n  for (let i = 0; i < 106; i++) {\n    bag.push('epic');\n  }\n\n  for (let i = 0; i < 380; i++) {\n    bag.push('rare');\n  }\n\n  for (let i = 0; i < 2000 - 380 - 106 - 20 - 1; i++) {\n    bag.push('common');\n  }\n\n  return shuffle(bag);\n};\n\nexport const NaiveBox = () => {\n  const [bag, setBag] = useState<NaiveBag[]>([]);\n\n  useEffect(() => {\n    const newBag = createBag();\n\n    setBag(newBag);\n  }, []);\n\n  const [charOpened, setCharOpened] = useState<\n    keyof typeof randomBoxOdds | undefined\n  >(undefined);\n\n  const openBoxHandler = () => {\n    const randomIndex = Math.floor(Math.random() * 2000);\n\n    const char = bag[randomIndex];\n\n    setCharOpened(char);\n  };\n\n  useEffect(() => {\n    if (charOpened) {\n      setTimeout(() => {\n        setCharOpened(undefined);\n      }, 2 * 1000);\n    }\n  }, [charOpened]);\n\n  return (\n    <CrateInfoItem>\n      <h1 className=\"mb-5 text-2xl\">Naive Bag Implementation Box</h1>\n\n      <div className=\"grid grid-cols-2 mb-5\">\n        <CenteredTextItem className=\"bg-theme-orange\">\n          Mythical (0.05%)\n        </CenteredTextItem>\n        <div className=\"grid grid-rows-4\">\n          <CenteredTextItem className=\"bg-theme-blue row-span-2\">\n            Legendary (1%)\n          </CenteredTextItem>\n          <CenteredTextItem className=\"bg-theme-lteal2\">\n            Epic (5.3%)\n          </CenteredTextItem>\n          <div className=\"grid grid-cols-2\">\n            <CenteredTextItem className=\"dark:bg-theme-dgray bg-theme-lgray\">\n              Rare (19%)\n            </CenteredTextItem>\n            <CenteredTextItem className=\"dark:bg-theme-dteal bg-theme-lteal\">\n              Common (74.65%)\n            </CenteredTextItem>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <PillButton\n          className=\"bg-theme-lteal hover:bg-theme-lteal2 w-full\"\n          onClick={openBoxHandler}\n        >\n          Open\n        </PillButton>\n      </div>\n\n      {/* 'Modal' to display opened item */}\n      {charOpened ? (\n        <CharacterModal>{charOpened.toLocaleUpperCase()}</CharacterModal>\n      ) : null}\n    </CrateInfoItem>\n  );\n};\n", "export { CenteredTextItem } from './centered-text-item';\nexport { CharacterModal } from './character-modal';\nexport { CrateInfoItem } from './crate-info-item';\n", "import { type FC, type ReactNode } from 'react';\nimport { styled } from '~/stitches';\n\nconst Wrapper = styled('div', {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: '16px',\n});\n\nexport const CenteredTextItem: FC<{\n  children: ReactNode;\n  className?: string;\n}> = ({ className, children }) => {\n  return <Wrapper className={className}>{children}</Wrapper>;\n};\n", "import { type FC } from 'react';\n\nconst ModalOverlay = () => {\n  return (\n    <div className=\"absolute top-0 bottom-0 left-0 right-0  bg-theme-black bg-opacity-70 backdrop-blur-sm z-10 rounded-sm\" />\n  );\n};\n\n/**\n * Expects to be used underneath a `position: relative` container\n */\nexport const CharacterModal: FC = ({ children }) => {\n  return (\n    <div role=\"dialog\" className=\"absolute top-0 bottom-0 left-0 right-0\">\n      <ModalOverlay />\n      <div className=\"relative h-full w-full\">\n        <div className=\"absolute top-0 bottom-0 left-0 right-0 flex justify-center items-center z-20\">\n          <span className=\"text-theme-white\">{children}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n", "import { type FC } from 'react';\n\nexport const CrateInfoItem: FC = ({ children }) => {\n  return (\n    <li className=\"relative border-2 rounded-md border-theme-dteal p-5\">\n      {children}\n    </li>\n  );\n};\n", "import { useEffect, useState, type FC } from 'react';\nimport { PillButton } from '~/common/ui-elements';\nimport { CenteredTextItem, CharacterModal, CrateInfoItem } from './helpers';\nimport { openBox } from './open-box';\n\nconst randomBoxOdds = {\n  common: 74,\n  rare: 19,\n  epic: 5.3,\n  legendary: 1.3,\n  mythical: 0.4,\n};\n\nexport const WeightedBox: FC = () => {\n  const [charOpened, setCharOpened] = useState<\n    keyof typeof randomBoxOdds | undefined\n  >(undefined);\n\n  const openBoxHandler = () => {\n    setCharOpened(openBox(randomBoxOdds));\n  };\n\n  useEffect(() => {\n    if (charOpened) {\n      setTimeout(() => {\n        setCharOpened(undefined);\n      }, 2 * 1000);\n    }\n  }, [charOpened]);\n\n  return (\n    <CrateInfoItem>\n      <h1 className=\"mb-5 text-2xl\">Weighted-Random Box</h1>\n      <div className=\"grid grid-cols-2 mb-5\">\n        <CenteredTextItem className=\"bg-theme-orange\">\n          Mythical (0.4%)\n        </CenteredTextItem>\n        <div className=\"grid grid-rows-4\">\n          <CenteredTextItem className=\"bg-theme-blue row-span-2\">\n            Legendary (1.3%)\n          </CenteredTextItem>\n          <CenteredTextItem className=\"bg-theme-lteal2\">\n            Epic (5.3%)\n          </CenteredTextItem>\n          <div className=\"grid grid-cols-2\">\n            <CenteredTextItem className=\"dark:bg-theme-dgray bg-theme-lgray\">\n              Rare (19%)\n            </CenteredTextItem>\n            <CenteredTextItem className=\"dark:bg-theme-dteal bg-theme-lteal\">\n              Common (74%)\n            </CenteredTextItem>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <PillButton\n          className=\"bg-theme-lteal hover:bg-theme-lteal2 w-full\"\n          onClick={openBoxHandler}\n        >\n          Open\n        </PillButton>\n      </div>\n\n      {/* 'Modal' to display opened item */}\n      {charOpened ? (\n        <CharacterModal>{charOpened.toLocaleUpperCase()}</CharacterModal>\n      ) : null}\n    </CrateInfoItem>\n  );\n};\n", "/**\n * @param {Record<string, number>} odds an object whose values determine the odds of the loot crate\n * @returns the key of the best-matched odd\n */\nexport const openBox = <T extends Record<string, number>>(\n  odds: T\n): Extract<keyof T, string> | undefined => {\n  let sum = 0;\n\n  const randomNumber = Math.random();\n\n  for (const odd in odds) {\n    const weight = odds[odd];\n\n    const normalizedWeight = weight / 100;\n\n    sum += normalizedWeight;\n\n    if (randomNumber <= sum) {\n      return odd;\n    }\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
