{
  "version": 3,
  "sources": ["../../../app/common/hooks/theme/useDarkMode.ts", "../../../app/common/hooks/theme/index.ts"],
  "sourcesContent": ["import { useCallback, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\nexport const useDarkMode: () => [\n  mode: Theme,\n  setMode: (theme: Theme) => void\n] = () => {\n  const [mode, setM] = useState<'dark' | 'light'>('dark');\n\n  const setMode = useCallback((theme: 'light' | 'dark') => {\n    if (theme === 'dark') {\n      // document.documentElement.classList.add('dark');\n      // localStorage.setItem('theme', 'dark');\n\n      setM('dark');\n    } else if (theme === 'light') {\n      // document.documentElement.classList.remove('dark');\n      // localStorage.setItem('theme', 'light');\n\n      setM('light');\n    }\n  }, []);\n\n  useEffect(() => {\n    // On page load or when changing themes, best to add inline in `head` to avoid FOUC\n    if (\n      localStorage.theme === 'dark' ||\n      (!('theme' in localStorage) &&\n        window.matchMedia('(prefers-color-scheme: dark)').matches)\n    ) {\n      // document.documentElement.classList.add('dark');\n      setM('dark');\n    } else {\n      // document.documentElement.classList.remove('dark');\n      setM('light');\n    }\n  }, []);\n\n  return [mode, setMode];\n};\n", "export { useDarkMode } from './useDarkMode';\n"],
  "mappings": ";;;;;;;AAAA;AAAA,mBAAiD;AAI1C,IAAM,cAGT,MAAM;AACR,QAAM,CAAC,MAAM,QAAQ,2BAA2B;AAEhD,QAAM,UAAU,8BAAY,CAAC,UAA4B;AACvD,QAAI,UAAU,QAAQ;AAIpB,WAAK;AAAA,eACI,UAAU,SAAS;AAI5B,WAAK;AAAA;AAAA,KAEN;AAEH,8BAAU,MAAM;AAEd,QACE,aAAa,UAAU,UACtB,CAAE,YAAW,iBACZ,OAAO,WAAW,gCAAgC,SACpD;AAEA,WAAK;AAAA,WACA;AAEL,WAAK;AAAA;AAAA,KAEN;AAEH,SAAO,CAAC,MAAM;AAAA;;;ACvChB;",
  "names": []
}
